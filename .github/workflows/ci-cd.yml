name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    # üß© 1. Ch·∫°y MongoDB & RabbitMQ l√†m service test
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # üß© 2. C√†i dependencies cho t·ª´ng service
      - name: Install dependencies for all services
        run: |
          set -e
          for d in api-gateway auth product order; do
            if [ -f "$d/package.json" ]; then
              echo "Installing deps for $d"
              (cd $d && npm ci || npm install)
            fi
          done

      # üß© 3. Ch·∫°y test v·ªõi MongoDB & RabbitMQ local
      - name: Run tests for services that have tests
        env:
          MONGODB_AUTH_URI: mongodb://127.0.0.1:27017/auth_db
          RABBITMQ_URI: amqp://guest:guest@127.0.0.1:5672
          NODE_ENV: test
          JWT_SECRET: test_secret
        run: |
          set -e
          for d in auth product; do
            if [ -f "$d/package.json" ]; then
              echo "Running tests for $d"
              (cd $d && npm test --silent)
            fi
          done

  build-docker:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # üß© 4. Build Docker image cho t·ª´ng service
      - name: Build Docker images locally
        run: |
          set -e
          for d in api-gateway auth product order; do
            if [ -f "$d/Dockerfile" ]; then
              IMAGE_NAME=$d:local
              echo "Building image $IMAGE_NAME"
              docker build -t $IMAGE_NAME $d
            fi
          done

      # üß© 5. Ki·ªÉm tra danh s√°ch image sau khi build
      - name: List built Docker images
        run: docker images

      # üß© 6. (T√πy ch·ªçn) Ki·ªÉm tra container ch·∫°y ƒë∆∞·ª£c kh√¥ng
      - name: Run containers for smoke test
        run: |
          set -e
          for d in api-gateway auth product order; do
            if [ -f "$d/Dockerfile" ]; then
              echo "Testing container for $d"
              docker run -d --rm --name $d-test $d:local || true
              sleep 5
              docker ps
              docker stop $d-test || true
            fi
          done
