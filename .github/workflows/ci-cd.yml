name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies for all services
        run: |
          set -e
          for d in api-gateway auth product order; do
            if [ -f "$d/package.json" ]; then
              echo "Installing deps for $d"
              (cd $d && npm ci || npm install)
            fi
          done

      - name: Run tests for services that have tests
        env:
          MONGODB_AUTH_URI: mongodb://127.0.0.1:27017/auth_db
          NODE_ENV: test
          JWT_SECRET: test_secret
        run: |
          set -e
          for d in auth product; do
            if [ -f "$d/package.json" ]; then
              echo "Running tests for $d"
              (cd $d && npm test --silent)
            fi
          done

  build-and-push:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          set -e
          for d in api-gateway auth product order; do
            if [ -f "$d/Dockerfile" ]; then
              IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/$d:${{ github.sha }}
              echo "Building and pushing $IMAGE_NAME"
              docker build -t $IMAGE_NAME $d
              docker push $IMAGE_NAME
            fi
          done

  # ðŸ§© 5. Pull image vÃ  cháº¡y container trÃªn runner local (PowerShell)
  pull-to-local:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Login Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          docker login -u $env:DOCKERHUB_USERNAME -p $env:DOCKERHUB_TOKEN

      - name: Pull latest images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          $services = "api-gateway","auth","product","order"
          foreach ($d in $services) {
            $imageName = "${env:DOCKERHUB_USERNAME}/$d:${env:GITHUB_SHA}"
            Write-Host "Pulling $imageName"
            docker pull $imageName
          }

      - name: Stop and remove old containers if exist
        run: |
          $services = "api-gateway","auth","product","order"
          foreach ($d in $services) {
            if (docker ps -a --format "{{.Names}}" | Select-String -Pattern "^$d$") {
              Write-Host "Stopping and removing old container: $d"
              docker stop $d
              docker rm $d
            }
          }

      - name: Run containers
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          $services = @{
            "api-gateway" = 8000
            "auth"        = 8001
            "product"     = 8002
            "order"       = 8003
          }
          foreach ($d in $services.Keys) {
            $port = $services[$d]
            $imageName = "${env:DOCKERHUB_USERNAME}/$d:${env:GITHUB_SHA}"
            Write-Host "Running container for $d on port $port"
            docker run -d --name $d -p "$port:8000" $imageName
          }
